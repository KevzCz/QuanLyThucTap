import mongoose from 'mongoose';
import Account from '../models/Account.js';
import SinhVien from '../models/SinhVien.js';
import GiangVien from '../models/GiangVien.js';
import BanChuNhiem from '../models/BanChuNhiem.js';
import InternshipSubject from '../models/InternshipSubject.js';
import PageHeader from '../models/PageHeader.js';
import SubHeader from '../models/SubHeader.js';
import Report from '../models/Report.js';
import InternshipGrade from '../models/InternshipGrade.js';
import ChatRequest from '../models/ChatRequest.js';
import ChatConversation from '../models/ChatConversation.js';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/QLTT';

// Sample data generators
const vietnameseNames = {
  firstNames: ['Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng'],
  middleNames: ['VƒÉn', 'Th·ªã', 'H·ªØu', 'Minh', 'Anh', 'Qu·ªëc', 'ƒê·ª©c', 'Thanh', 'Ph∆∞∆°ng', 'Kh√°nh'],
  lastNames: ['H√πng', 'Linh', 'An', 'B√¨nh', 'Chi', 'D≈©ng', 'H√†', 'Khoa', 'Long', 'Mai', 'Nam', 'Ph∆∞∆°ng', 'Qu√¢n', 'Th·∫£o', 'T√∫', 'Vy']
};

function generateName() {
  const first = vietnameseNames.firstNames[Math.floor(Math.random() * vietnameseNames.firstNames.length)];
  const middle = vietnameseNames.middleNames[Math.floor(Math.random() * vietnameseNames.middleNames.length)];
  const last = vietnameseNames.lastNames[Math.floor(Math.random() * vietnameseNames.lastNames.length)];
  return `${first} ${middle} ${last}`;
}

function generateEmail(name, role, index) {
  const roleMap = {
    'phong-dao-tao': 'pdt',
    'ban-chu-nhiem': 'bcn',
    'giang-vien': 'gv',
    'sinh-vien': 'sv'
  };
  
  const rolePrefix = roleMap[role] || role;
  const paddedIndex = String(index).padStart(role === 'giang-vien' || role === 'sinh-vien' ? 4 : 3, '0');
  return `${rolePrefix}${paddedIndex}@gmail.com`;
}

async function seedDatabase() {
  try {
    console.log('üîå Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Clear existing data
    console.log('\nüóëÔ∏è  Clearing existing data...');
    await Account.deleteMany({});
    await SinhVien.deleteMany({});
    await GiangVien.deleteMany({});
    await BanChuNhiem.deleteMany({});
    await InternshipSubject.deleteMany({});
    await PageHeader.deleteMany({});
    await SubHeader.deleteMany({});
    await Report.deleteMany({});
    await InternshipGrade.deleteMany({});
    await ChatRequest.deleteMany({});
    await ChatConversation.deleteMany({});
    console.log('‚úÖ Cleared all collections');

    // Create PDT accounts
    console.log('\nüë§ Creating Ph√≤ng ƒê√†o T·∫°o accounts...');
    const pdtAccounts = [];
    for (let i = 1; i <= 20; i++) {
      const name = generateName();
      const account = await Account.create({
        name,
        email: generateEmail(name, 'phong-dao-tao', i),
        password: '123456',
        role: 'phong-dao-tao',
        status: 'open'
      });
      pdtAccounts.push(account);
      console.log(`  ‚úì ${account.id} - ${account.name}`);
    }

    // Create BCN accounts
    console.log('\nüë§ Creating Ban Ch·ªß Nhi·ªám accounts...');
    const bcnAccounts = [];
    const departments = ['C√¥ng ngh·ªá th√¥ng tin', 'Kinh t·∫ø', 'K·ªπ thu·∫≠t', 'ƒêi·ªán t·ª≠', 'C∆° kh√≠'];
    for (let i = 1; i <= 20; i++) {
      const name = generateName();
      const account = await Account.create({
        name,
        email: generateEmail(name, 'ban-chu-nhiem', i),
        password: '123456',
        role: 'ban-chu-nhiem',
        status: 'open'
      });
      bcnAccounts.push(account);
      
      await BanChuNhiem.create({
        account: account._id,
        department: departments[(i - 1) % departments.length]
      });
      
      console.log(`  ‚úì ${account.id} - ${account.name}`);
    }

    // Create GV accounts
    console.log('\nüë§ Creating Gi·∫£ng Vi√™n accounts...');
    const gvAccounts = [];
    for (let i = 1; i <= 20; i++) {
      const name = generateName();
      const account = await Account.create({
        name,
        email: generateEmail(name, 'giang-vien', i),
        password: '123456',
        role: 'giang-vien',
        status: 'open'
      });
      gvAccounts.push(account);
      
      await GiangVien.create({
        account: account._id,
        department: departments[(i - 1) % departments.length],
        maxStudents: 5 + Math.floor(Math.random() * 6) // 5-10 students
      });
      
      console.log(`  ‚úì ${account.id} - ${account.name}`);
    }

    // Create SV accounts
    console.log('\nüë§ Creating Sinh Vi√™n accounts...');
    const svAccounts = [];
    const classes = ['DHKTPM15A', 'DHKTPM15B', 'DHKTPM16A', 'DHKTPM16B', 'DHKTPM17A', 'DHKTPM17B', 'DHKTPM18A', 'DHKTPM18B'];
    for (let i = 1; i <= 20; i++) {
      const name = generateName();
      const account = await Account.create({
        name,
        email: generateEmail(name, 'sinh-vien', i),
        password: '123456',
        role: 'sinh-vien',
        status: 'open'
      });
      svAccounts.push(account);
      
      await SinhVien.create({
        account: account._id,
        internshipStatus: 'chua-duoc-huong-dan',
        studentClass: classes[(i - 1) % classes.length],
        year: 2024 + Math.floor((i - 1) / 10)
      });
      
      console.log(`  ‚úì ${account.id} - ${account.name}`);
    }

    // Create Internship Subjects (each BCN can only manage one subject)
    console.log('\nüìö Creating Internship Subjects...');
    const subjects = [];
    const subjectTemplates = [
      { title: 'Th·ª±c t·∫≠p t·ªët nghi·ªáp CNTT', duration: '8 tu·∫ßn', maxStudents: 30, dept: 'C√¥ng ngh·ªá th√¥ng tin', status: 'open' },
      { title: 'Th·ª±c t·∫≠p doanh nghi·ªáp Kinh t·∫ø', duration: '10 tu·∫ßn', maxStudents: 25, dept: 'Kinh t·∫ø', status: 'open' },
      { title: 'Th·ª±c t·∫≠p k·ªπ thu·∫≠t ph·∫ßn m·ªÅm', duration: '12 tu·∫ßn', maxStudents: 20, dept: 'C√¥ng ngh·ªá th√¥ng tin', status: 'locked' },
      { title: 'Th·ª±c t·∫≠p Khoa h·ªçc d·ªØ li·ªáu', duration: '8 tu·∫ßn', maxStudents: 15, dept: 'K·ªπ thu·∫≠t', status: 'open' },
      { title: 'Th·ª±c t·∫≠p An to√†n th√¥ng tin', duration: '10 tu·∫ßn', maxStudents: 20, dept: 'ƒêi·ªán t·ª≠', status: 'open' },
      { title: 'Th·ª±c t·∫≠p ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng', duration: '10 tu·∫ßn', maxStudents: 25, dept: 'ƒêi·ªán t·ª≠', status: 'locked' },
      { title: 'Th·ª±c t·∫≠p K·ªπ thu·∫≠t c∆° kh√≠', duration: '12 tu·∫ßn', maxStudents: 20, dept: 'C∆° kh√≠', status: 'open' },
      { title: 'Th·ª±c t·∫≠p K·∫ø to√°n doanh nghi·ªáp', duration: '8 tu·∫ßn', maxStudents: 30, dept: 'Kinh t·∫ø', status: 'locked' },
      { title: 'Th·ª±c t·∫≠p Qu·∫£n tr·ªã kinh doanh', duration: '10 tu·∫ßn', maxStudents: 25, dept: 'K·ªπ thu·∫≠t', status: 'locked' },
      { title: 'Th·ª±c t·∫≠p IoT v√† Embedded Systems', duration: '12 tu·∫ßn', maxStudents: 15, dept: 'C∆° kh√≠', status: 'locked' },
      { title: 'Th·ª±c t·∫≠p Web Development', duration: '10 tu·∫ßn', maxStudents: 25, dept: 'C√¥ng ngh·ªá th√¥ng tin', status: 'open' },
      { title: 'Th·ª±c t·∫≠p Mobile App Development', duration: '12 tu·∫ßn', maxStudents: 20, dept: 'Kinh t·∫ø', status: 'open' },
      { title: 'Th·ª±c t·∫≠p DevOps', duration: '8 tu·∫ßn', maxStudents: 15, dept: 'K·ªπ thu·∫≠t', status: 'open' },
      { title: 'Th·ª±c t·∫≠p Machine Learning', duration: '10 tu·∫ßn', maxStudents: 15, dept: 'ƒêi·ªán t·ª≠', status: 'open' },
      { title: 'Th·ª±c t·∫≠p Blockchain', duration: '12 tu·∫ßn', maxStudents: 20, dept: 'C∆° kh√≠', status: 'open' }
    ];

    // Use one BCN per subject to avoid conflicts
    for (let i = 0; i < Math.min(subjectTemplates.length, bcnAccounts.length); i++) {
      const template = subjectTemplates[i];
      const now = new Date();
      const regStart = new Date(now.getTime() + (i - 7) * 7 * 24 * 60 * 60 * 1000);
      const regEnd = new Date(regStart.getTime() + 30 * 24 * 60 * 60 * 1000);

      // Get 2 lecturers for each subject
      const lecturerIds = [
        gvAccounts[i % gvAccounts.length]._id,
        gvAccounts[(i + 1) % gvAccounts.length]._id
      ];

      // Get 2 students for each subject
      const studentIds = [
        svAccounts[i % svAccounts.length]._id,
        svAccounts[(i + 10) % svAccounts.length]._id
      ];

      const subject = await InternshipSubject.create({
        title: template.title,
        description: `M√¥n th·ª±c t·∫≠p ${template.title.toLowerCase()} d√†nh cho sinh vi√™n nƒÉm cu·ªëi`,
        duration: template.duration,
        maxStudents: template.maxStudents,
        registrationStartDate: regStart,
        registrationEndDate: regEnd,
        manager: bcnAccounts[i]._id, // Each BCN manages exactly one subject
        status: template.status,
        lecturers: lecturerIds,
        students: studentIds
      });
      subjects.push(subject);
      console.log(`  ‚úì ${subject.id} - ${subject.title}`);
    }

    // Update SinhVien with subject relationships (each student gets one subject)
    for (let i = 0; i < svAccounts.length; i++) {
      await SinhVien.findOneAndUpdate(
        { account: svAccounts[i]._id },
        { 
          internshipSubject: subjects[i % subjects.length]._id,
          supervisor: gvAccounts[i % gvAccounts.length]._id,
          internshipStatus: i < 15 ? 'duoc-huong-dan' : 'chua-duoc-huong-dan'
        }
      );
    }

    // Update GiangVien with managed students (each lecturer gets multiple students)
    for (let i = 0; i < gvAccounts.length; i++) {
      const studentIds = svAccounts
        .filter((_, idx) => idx % gvAccounts.length === i)
        .map(acc => acc._id);
      
      await GiangVien.findOneAndUpdate(
        { account: gvAccounts[i]._id },
        { 
          internshipSubject: subjects[i % subjects.length]._id,
          managedStudents: studentIds
        }
      );
    }

    // Update BCN with subject relationships
    for (let i = 0; i < Math.min(bcnAccounts.length, subjects.length); i++) {
      await BanChuNhiem.findOneAndUpdate(
        { account: bcnAccounts[i]._id },
        { internshipSubject: subjects[i]._id }
      );
    }

    // Create Page Headers and Sub Headers (Khoa Pages)
    console.log('\nüìÑ Creating Page Headers and Sub Headers...');
    for (let i = 0; i < subjects.length; i++) {
      const subject = subjects[i];
      
      // Khoa page headers
      const headerTemplates = [
        { title: 'Th√¥ng b√°o chung', order: 1 },
        { title: 'T√†i li·ªáu h∆∞·ªõng d·∫´n', order: 2 },
        { title: 'Bi·ªÉu m·∫´u', order: 3 }
      ];

      for (const template of headerTemplates) {
        const header = await PageHeader.create({
          internshipSubject: subject._id,
          title: template.title,
          order: template.order,
          audience: 'tat-ca',
          pageType: 'khoa',
          isActive: true
        });

        // Create sub-headers for each header
        const subTemplates = [
          { title: 'Th√¥ng b√°o 1', kind: 'thong-bao', order: 1 },
          { title: 'N·ªôp b√°o c√°o', kind: 'nop-file', order: 2 }
        ];

        for (const subTemplate of subTemplates) {
          const now = new Date();
          await SubHeader.create({
            pageHeader: header._id,
            title: subTemplate.title,
            html: `<p>N·ªôi dung ${subTemplate.title} cho ${header.title}</p>`,
            kind: subTemplate.kind,
            order: subTemplate.order,
            startAt: subTemplate.kind === 'nop-file' ? now.toISOString() : undefined,
            endAt: subTemplate.kind === 'nop-file' ? new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString() : undefined
          });
        }
      }

      // Teacher page headers for first lecturer
      if (subject.lecturers.length > 0) {
        const gv = await GiangVien.findOne({ account: subject.lecturers[0] });
        const teacherHeaderTemplates = [
          { title: 'H∆∞·ªõng d·∫´n cho sinh vi√™n', order: 1 },
          { title: 'N·ªôp b√†i t·∫≠p', order: 2 }
        ];

        for (const template of teacherHeaderTemplates) {
          const header = await PageHeader.create({
            internshipSubject: subject._id,
            instructor: gv._id,
            title: template.title,
            order: template.order,
            audience: 'sinh-vien',
            pageType: 'teacher',
            isActive: true
          });

          // Create sub-headers
          const now = new Date();
          await SubHeader.create({
            pageHeader: header._id,
            title: 'N·ªôi dung h∆∞·ªõng d·∫´n',
            html: '<p>H∆∞·ªõng d·∫´n chi ti·∫øt cho sinh vi√™n</p>',
            kind: 'thuong',
            order: 1
          });
        }
      }

      console.log(`  ‚úì Created pages for ${subject.title}`);
    }

    // Create Reports
    console.log('\nüìù Creating Reports...');
    const reportTypes = ['tuan', 'thang', 'quy', 'nam', 'khac'];
    const reportStatuses = ['draft', 'submitted', 'reviewed', 'approved'];
    
    // Create 20 reports with varied data
    for (let i = 0; i < 20; i++) {
      const report = await Report.create({
        title: `B√°o c√°o ${reportTypes[i % reportTypes.length]} - K·ª≥ ${Math.floor(i / reportTypes.length) + 1}`,
        content: `<h2>B√°o c√°o ti·∫øn ƒë·ªô th·ª±c t·∫≠p - K·ª≥ ${Math.floor(i / reportTypes.length) + 1}</h2><p>N·ªôi dung b√°o c√°o chi ti·∫øt v·ªÅ qu√° tr√¨nh th·ª±c t·∫≠p, c√°c ho·∫°t ƒë·ªông ƒë√£ th·ª±c hi·ªán v√† k·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c...</p>`,
        reportType: reportTypes[i % reportTypes.length],
        status: reportStatuses[i % reportStatuses.length],
        instructor: gvAccounts[i % gvAccounts.length]._id,
        internshipSubject: subjects[i % subjects.length]._id,
        submittedAt: i > 4 ? new Date(Date.now() - (20 - i) * 24 * 60 * 60 * 1000) : null,
        reviewedAt: i > 9 ? new Date(Date.now() - (15 - i) * 24 * 60 * 60 * 1000) : null,
        reviewNote: i > 9 ? 'B√°o c√°o t·ªët, c·∫ßn b·ªï sung th√™m th√¥ng tin v·ªÅ ti·∫øn ƒë·ªô c√¥ng vi·ªác' : '',
        attachments: []
      });
      console.log(`  ‚úì ${report.id} - ${report.title}`);
    }

    // Create Internship Grades
    console.log('\nüìä Creating Internship Grades...');
    
    // Sample company data for internships
    const companies = [
      { name: 'FPT Software', address: '17 Duy T√¢n, C·∫ßu Gi·∫•y, H√† N·ªôi', supervisor: 'Nguy·ªÖn VƒÉn An', email: 'nva@fpt.com.vn', phone: '0901234567' },
      { name: 'Viettel Solutions', address: '6 Ph·∫°m VƒÉn B·∫°ch, C·∫ßu Gi·∫•y, H√† N·ªôi', supervisor: 'Tr·∫ßn Th·ªã B√¨nh', email: 'ttb@viettel.vn', phone: '0902345678' },
      { name: 'VNG Corporation', address: 'Z06, ƒë∆∞·ªùng s·ªë 13, T√¢n Thu·∫≠n ƒê√¥ng, Qu·∫≠n 7, TP.HCM', supervisor: 'L√™ Minh Chi·∫øn', email: 'lmc@vng.com.vn', phone: '0903456789' },
      { name: 'Tiki Corporation', address: '52 √öt T·ªãch, Ph∆∞·ªùng 4, T√¢n B√¨nh, TP.HCM', supervisor: 'Ph·∫°m Th·ªã Dung', email: 'ptd@tiki.vn', phone: '0904567890' },
      { name: 'MISA JSC', address: 'T·∫ßng 5, T√≤a nh√† Lim Tower 3, T·ªë H·ªØu, H√† N·ªôi', supervisor: 'Ho√†ng VƒÉn Em', email: 'hve@misa.com.vn', phone: '0905678901' },
      { name: 'Shopee Vietnam', address: 'T√≤a nh√† Viettel, 285 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 10, TP.HCM', supervisor: 'ƒê·ªó Th·ªã Ph∆∞∆°ng', email: 'dtp@shopee.vn', phone: '0906789012' },
      { name: 'Sendo Technology', address: 'L·∫ßu 7, Vincom Center, 72 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM', supervisor: 'V≈© VƒÉn Giang', email: 'vvg@sendo.vn', phone: '0907890123' },
      { name: 'Base.vn', address: '71 Nguy·ªÖn Ch√≠ Thanh, ƒê·ªëng ƒêa, H√† N·ªôi', supervisor: 'B√πi Th·ªã H∆∞∆°ng', email: 'bth@base.vn', phone: '0908901234' },
      { name: 'VinID JSC', address: '458 Minh Khai, Hai B√† Tr∆∞ng, H√† N·ªôi', supervisor: 'ƒêinh VƒÉn √çch', email: 'dvi@vinid.net', phone: '0909012345' },
      { name: 'Teko Vietnam', address: '92 Nam K·ª≥ Kh·ªüi Nghƒ©a, Qu·∫≠n 1, TP.HCM', supervisor: 'Ng√¥ Th·ªã Kim', email: 'ntk@teko.vn', phone: '0910123456' }
    ];
    
    // Sample project topics for thesis
    const projectTopics = [
      'X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán tr·ª±c tuy·∫øn s·ª≠ d·ª•ng React v√† Node.js',
      'Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông qu·∫£n l√Ω chi ti√™u c√° nh√¢n v·ªõi React Native',
      'Thi·∫øt k·∫ø v√† tri·ªÉn khai website b√°n h√†ng tr·ª±c tuy·∫øn v·ªõi gi·ªè h√†ng v√† thanh to√°n',
      'X√¢y d·ª±ng chatbot h·ªó tr·ª£ kh√°ch h√†ng s·ª≠ d·ª•ng c√¥ng ngh·ªá AI v√† NLP',
      'Ph√°t tri·ªÉn h·ªá th·ªëng theo d√µi s·ª©c kh·ªèe v·ªõi IoT v√† ·ª©ng d·ª•ng mobile',
      'Thi·∫øt k·∫ø website tin t·ª©c v·ªõi CMS v√† h·ªá th·ªëng ph√¢n quy·ªÅn n√¢ng cao',
      'X√¢y d·ª±ng ·ª©ng d·ª•ng qu·∫£n l√Ω h·ªçc t·∫≠p tr·ª±c tuy·∫øn (E-learning platform)',
      'Ph√°t tri·ªÉn h·ªá th·ªëng ƒë·∫∑t ph√≤ng kh√°ch s·∫°n v·ªõi t√≠ch h·ª£p thanh to√°n online',
      'Thi·∫øt k·∫ø game gi√°o d·ª•c cho tr·∫ª em s·ª≠ d·ª•ng Unity ho·∫∑c Phaser',
      'X√¢y d·ª±ng h·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª± v·ªõi dashboard v√† b√°o c√°o th·ªëng k√™'
    ];
    
    for (let i = 0; i < 20; i++) {
      const now = new Date();
      const startDate = new Date(now.getTime() - (60 + i * 5) * 24 * 60 * 60 * 1000);
      const endDate = new Date(now.getTime() + (30 - i * 2) * 24 * 60 * 60 * 1000);
      const isInternship = i < 10;
      
      const grade = await InternshipGrade.create({
        student: svAccounts[i % svAccounts.length]._id,
        supervisor: gvAccounts[i % gvAccounts.length]._id,
        internshipSubject: subjects[i % subjects.length]._id,
        workType: isInternship ? 'thuc_tap' : 'do_an',
        startDate: startDate,
        endDate: endDate,
        company: isInternship ? {
          name: companies[i % companies.length].name,
          supervisorName: companies[i % companies.length].supervisor,
          supervisorEmail: companies[i % companies.length].email,
          supervisorPhone: companies[i % companies.length].phone,
          address: companies[i % companies.length].address,
          location: {
            lat: 10.762622 + (Math.random() - 0.5) * 0.1,
            lng: 106.660172 + (Math.random() - 0.5) * 0.1
          }
        } : undefined,
        projectTopic: isInternship ? undefined : projectTopics[(i - 10) % projectTopics.length],
        gradeComponents: [
          {
            type: 'supervisor_score',
            score: 6.5 + Math.random() * 3,
            weight: 0.7,
            comment: 'ƒêi·ªÉm ƒë√°nh gi√° t·ª´ gi·∫£ng vi√™n h∆∞·ªõng d·∫´n',
            gradedBy: 'supervisor'
          },
          {
            type: 'company_score',
            score: 7.0 + Math.random() * 2.5,
            weight: 0.3,
            comment: isInternship ? 'ƒêi·ªÉm ƒë√°nh gi√° t·ª´ c√¥ng ty' : 'ƒêi·ªÉm ƒë√°nh gi√° ph·∫£n bi·ªán',
            gradedBy: 'company'
          }
        ],
        milestones: [
          {
            type: 'start',
            title: isInternship ? 'B·∫Øt ƒë·∫ßu th·ª±c t·∫≠p' : 'B·∫Øt ƒë·∫ßu ƒë·ªì √°n',
            description: isInternship ? 'Kh·ªüi t·∫°o qu√° tr√¨nh th·ª±c t·∫≠p t·∫°i doanh nghi·ªáp' : 'Kh·ªüi t·∫°o d·ª± √°n ƒë·ªì √°n t·ªët nghi·ªáp',
            dueDate: startDate,
            status: i < 15 ? 'completed' : 'pending',
            completedAt: i < 15 ? startDate : undefined,
            isCustom: false
          }
        ],
        status: i < 6 ? 'submitted' : i < 12 ? 'in_progress' : i < 18 ? 'draft_completed' : 'not_started',
        submittedToBCN: i < 6,
        submittedAt: i < 6 ? new Date(now.getTime() - (i * 2) * 24 * 60 * 60 * 1000) : undefined,
        supervisorFinalComment: i < 12 ? 'Sinh vi√™n chƒÉm ch·ªâ, nhi·ªát t√¨nh trong qu√° tr√¨nh th·ª±c t·∫≠p/l√†m ƒë·ªì √°n' : undefined
      });
      
      // Calculate final grade
      grade.calculateFinalGrade();
      await grade.save();
      
      const workTypeName = isInternship ? 'Th·ª±c t·∫≠p' : 'ƒê·ªì √°n';
      console.log(`  ‚úì Grade ${i + 1}/20 - ${workTypeName} for ${svAccounts[i % svAccounts.length].name} - Final: ${grade.finalGrade?.toFixed(2)}`);
    }

    // Create Chat Requests
    console.log('\nüí¨ Creating Chat Requests...');
    for (let i = 0; i < 20; i++) {
      const requester = svAccounts[i % svAccounts.length];
      const recipient = gvAccounts[i % gvAccounts.length];
      const requestId = `CR${Date.now()}${i}`;
      
      const request = await ChatRequest.create({
        requestId: requestId,
        fromUser: {
          userId: requester._id.toString(),
          name: requester.name,
          role: requester.role,
          email: requester.email
        },
        toUser: {
          userId: recipient._id.toString(),
          name: recipient.name,
          role: recipient.role,
          email: recipient.email
        },
        message: `Xin ch√†o th·∫ßy/c√¥, em mu·ªën trao ƒë·ªïi v·ªÅ ${i % 3 === 0 ? 'v·∫•n ƒë·ªÅ th·ª±c t·∫≠p' : i % 3 === 1 ? 'ƒë·ªÅ t√†i ƒë·ªì √°n' : 'ti·∫øn ƒë·ªô h·ªçc t·∫≠p'}`,
        requestType: 'chat',
        priority: i % 5 === 0 ? 'high' : 'normal',
        status: i < 10 ? 'accepted' : i < 15 ? 'pending' : 'declined'
      });
      console.log(`  ‚úì Chat request ${i + 1}/20`);

      // Create conversation if accepted
      if (i < 10) {
        const conversationId = `CONV${Date.now()}${i}`;
        await ChatConversation.create({
          conversationId: conversationId,
          participants: [
            {
              userId: requester._id.toString(),
              name: requester.name,
              role: requester.role
            },
            {
              userId: recipient._id.toString(),
              name: recipient.name,
              role: recipient.role
            }
          ],
          conversationType: 'direct',
          createdBy: requester._id.toString(),
          isActive: true,
          lastMessage: {
            content: 'Xin ch√†o th·∫ßy/c√¥',
            senderId: requester._id.toString(),
            senderName: requester.name,
            timestamp: new Date(),
            type: 'text'
          },
          metadata: {
            requestId: request.requestId
          }
        });
        console.log(`  ‚úì Created conversation for request ${i + 1}`);
      }
    }

    console.log('\nüéâ Seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`  ‚Ä¢ ${pdtAccounts.length} Ph√≤ng ƒê√†o T·∫°o accounts`);
    console.log(`  ‚Ä¢ ${bcnAccounts.length} Ban Ch·ªß Nhi·ªám accounts`);
    console.log(`  ‚Ä¢ ${gvAccounts.length} Gi·∫£ng Vi√™n accounts`);
    console.log(`  ‚Ä¢ ${svAccounts.length} Sinh Vi√™n accounts`);
    console.log(`  ‚Ä¢ ${subjects.length} Internship Subjects`);
    console.log(`  ‚Ä¢ Page Headers and Sub Headers created`);
    console.log(`  ‚Ä¢ 20 Reports`);
    console.log(`  ‚Ä¢ 20 Internship Grades`);
    console.log(`  ‚Ä¢ 20 Chat Requests`);
    console.log(`  ‚Ä¢ 10 Chat Conversations`);
    console.log('\nüîë Default password for all accounts: 123456');
    console.log('\n‚úÖ You can now login with any account email and 123456');

  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã Disconnected from MongoDB');
  }
}

// Run the seed script
seedDatabase()
  .then(() => {
    console.log('‚úÖ Seed script completed');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Seed script failed:', error);
    process.exit(1);
  });
